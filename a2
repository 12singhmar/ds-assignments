 
/*
Name: Akshaj
Roll No: 1024030493
Assignment: 2
*/


// 1) Binary Search

#include <iostream>
using namespace std;

int binarysearch(int arr[], int n, int key) {
    int low = 0, high = n - 1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (arr[mid] == key)
            return mid;
        else if (arr[mid] < key)
            low = mid + 1;
        else
            high = mid - 1;
    }
    return 0;
}


//
// 2) Bubble Sort
//

void bubblesort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++)
        for (int j = 0; j < n - 1 - i; j++)
            if (arr[j] > arr[j + 1]) {
                // Swap
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
}


//
// 3) Find Missing Number
//

#include <iostream>
using namespace std;

int main() {
    int a[100], n, sum = 0, full;

    cout << "Enter number of elements (one missing): ";
    cin >> n;

    cout << "Enter elements:\n";
    for (int i = 0; i < n; i++) {
        cin >> a[i];
        sum += a[i];
    }

    full = (n + 1) * (n + 2) / 2;

    cout << "Missing number: " << full - sum << endl;

    return 0;
}



//
// 4) String Operations
//

#include <iostream>
#include <string>
using namespace std;

int main() {
    int choice;
    do {
        cout << "\n----- STRING MENU -----\n";
        cout << "1. Concatenate two strings\n";
        cout << "2. Reverse a string\n";
        cout << "3. Delete vowels from string\n";
        cout << "4. Sort strings in alphabetical order\n";
        cout << "5. Convert character to lowercase\n";
        cout << "Enter choice: ";
        cin >> choice;

        if (choice == 1) {
            string a, b;
            cout << "Enter first string: ";
            cin >> a;
            cout << "Enter second string: ";
            cin >> b;
            string c = a + b;
            cout << "Concatenated: " << c << endl;
        }
        else if (choice == 2) {
            string s;
            cout << "Enter string: ";
            cin >> s;
            cout << "Reversed: ";
            for (int i = s.length() - 1; i >= 0; i--)
                cout << s[i];
            cout << endl;
        }
        else if (choice == 3) {
            string s, t = "";
            cout << "Enter string: ";
            cin >> s;
            for (int i = 0; i < s.length(); i++) {
                char ch = s[i];
                if (ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch != 'u' &&
                    ch != 'A' && ch != 'E' && ch != 'I' && ch != 'O' && ch != 'U') {
                    t += ch;
                }
            }
            cout << "Without vowels: " << t << endl;
        }
        else if (choice == 4) {
            string a[100];
            int n;
            cout << "Enter number of strings: ";
            cin >> n;
            cout << "Enter " << n << " strings:\n";
            for (int i = 0; i < n; i++)
                cin >> a[i];
            for (int i = 0; i < n - 1; i++)
                for (int j = i + 1; j < n; j++)
                    if (a[i] > a[j]) {
                        string temp = a[i];
                        a[i] = a[j];
                        a[j] = temp;
                    }
            cout << "Sorted strings:\n";
            for (int i = 0; i < n; i++)
                cout << a[i] << endl;
        }
        else if (choice == 5) {
            char ch;
            cout << "Enter character: ";
            cin >> ch;
            if (ch >= 'A' && ch <= 'Z')
                ch = ch + 32;
            cout << "Lowercase: " << ch << endl;
        }
        else {
            cout << "Invalid choice.\n";
        }
    } while (true);
    return 0;
}



//
// 5) Matrix Operations
//
// Q1 – Transpose of a Matrix

int main() {
    int r, c;
    cin >> r >> c;
    int a[r][c], t[c][r];
    for(int i=0;i<r;i++)
        for(int j=0;j<c;j++)
            cin >> a[i][j];

    for(int i=0;i<r;i++)
        for(int j=0;j<c;j++)
            t[j][i] = a[i][j];

    cout << "Transpose:\n";
    for(int i=0;i<c;i++){
        for(int j=0;j<r;j++)
            cout << t[i][j] << " ";
        cout << endl;
    }

    // Q2 – Lower Triangular Matrix
    int n;
    cin >> n;
    int b[n][n];
    for(int i=0;i<n;i++)
        for(int j=0;j<n;j++)
            cin >> b[i][j];

    cout << "Lower Triangular Matrix:\n";
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            if(j<=i)
                cout << b[i][j] << " ";
            else
                cout << "0 ";
        }
        cout << endl;
    }

    // Q3 – Upper Triangular Matrix
    int cmat[n][n];
    for(int i=0;i<n;i++)
        for(int j=0;j<n;j++)
            cin >> cmat[i][j];

    cout << "Upper Triangular Matrix:\n";
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            if(j>=i)
                cout << cmat[i][j] << " ";
            else
                cout << "0 ";
        }
        cout << endl;
    }

    // Q4 – Diagonal Matrix (store only diagonal)
    int d[n][n];
    for(int i=0;i<n;i++)
        for(int j=0;j<n;j++)
            cin >> d[i][j];

    cout << "Diagonal Matrix (only diagonals stored):\n";
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            if(i==j)
                cout << d[i][j] << " ";
            else
                cout << "0 ";
        }
        cout << endl;
    }

    // Q5 – Symmetric Matrix
    int s[n][n];
    for(int i=0;i<n;i++)
        for(int j=0;j<n;j++)
            cin >> s[i][j];

    cout << "Symmetric Matrix:\n";
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            if(i>=j)
                cout << s[i][j] << " ";
            else
                cout << s[j][i] << " "; // copy lower triangle to upper
        }
        cout << endl;
    }

    return 0;
}

// Q6 – Sparse Matrix operations (Transpose using Triplet)
int main() {
    int rows, cols, terms;
    cin >> rows >> cols >> terms;

    int triplet[terms][3];
    for(int i=0;i<terms;i++)
        cin >> triplet[i][0] >> triplet[i][1] >> triplet[i][2];

    int trans[terms][3];
    trans[0][0] = triplet[0][1];
    trans[0][1] = triplet[0][0];
    trans[0][2] = triplet[0][2];

    int t=1;
    for(int col=0; col<cols; col++)
        for(int i=1;i<terms;i++)
            if(triplet[i][1]==col){
                trans[t][0]=triplet[i][1];
                trans[t][1]=triplet[i][0];
                trans[t][2]=triplet[i][2];
                t++;
            }

    for(int i=0;i<terms;i++)
        cout << trans[i][0] << " " << trans[i][1] << " " << trans[i][2] << endl;


// Q7 – Count inversions in an array
    int n;
    cin >> n;
    int a[n];
    for(int i=0;i<n;i++)
        cin >> a[i];

    int count=0;
    for(int i=0;i<n-1;i++)
        for(int j=i+1;j<n;j++)
            if(a[i]>a[j])
                count++;

    cout << "Q7 Inversions: " << count << endl;


// Q8 – Count distinct elements in an array (no set)
    cin >> n;
    for(int i=0;i<n;i++)
        cin >> a[i];

    int distinct=0;
    for(int i=0;i<n;i++){
        int flag=0;
        for(int j=0;j<i;j++)
            if(a[i]==a[j]){
                flag=1;
                break;
            }
        if(flag==0)
            distinct++;
    }

    cout << "Q8 Distinct elements: " << distinct << endl;

    return 0;
}
